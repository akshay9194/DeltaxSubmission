

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "D:\DeltaX\SQL\ImdbSampleService\Imdb.Common\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Server=localhost;Database=DeltaX;Trusted_Connection=True; Application Name=ImDatabase"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.1000.169

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Imdb.Common.DbModel
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Actor> Actors { get; set; } // Actors
        System.Data.Entity.DbSet<MovieProducer> MovieProducers { get; set; } // MovieProducer
        System.Data.Entity.DbSet<MovieProducerActor> MovieProducerActors { get; set; } // MovieProducerActor
        System.Data.Entity.DbSet<Movy> Movies { get; set; } // Movies
        System.Data.Entity.DbSet<Producer> Producers { get; set; } // Producers

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        System.Collections.Generic.List<GetimdbDataReturnModel> GetimdbData();
        System.Collections.Generic.List<GetimdbDataReturnModel> GetimdbData(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetimdbDataReturnModel>> GetimdbDataAsync();

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Actor> Actors { get; set; } // Actors
        public System.Data.Entity.DbSet<MovieProducer> MovieProducers { get; set; } // MovieProducer
        public System.Data.Entity.DbSet<MovieProducerActor> MovieProducerActors { get; set; } // MovieProducerActor
        public System.Data.Entity.DbSet<Movy> Movies { get; set; } // Movies
        public System.Data.Entity.DbSet<Producer> Producers { get; set; } // Producers

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ActorConfiguration());
            modelBuilder.Configurations.Add(new MovieProducerConfiguration());
            modelBuilder.Configurations.Add(new MovieProducerActorConfiguration());
            modelBuilder.Configurations.Add(new MovyConfiguration());
            modelBuilder.Configurations.Add(new ProducerConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ActorConfiguration(schema));
            modelBuilder.Configurations.Add(new MovieProducerConfiguration(schema));
            modelBuilder.Configurations.Add(new MovieProducerActorConfiguration(schema));
            modelBuilder.Configurations.Add(new MovyConfiguration(schema));
            modelBuilder.Configurations.Add(new ProducerConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<GetimdbDataReturnModel> GetimdbData()
        {
            int procResult;
            return GetimdbData(out procResult);
        }

        public System.Collections.Generic.List<GetimdbDataReturnModel> GetimdbData(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetimdbDataReturnModel>("EXEC @procResult = [dbo].[GetimdbData] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetimdbDataReturnModel>> GetimdbDataAsync()
        {
            var procResultData = await Database.SqlQuery<GetimdbDataReturnModel>("EXEC [dbo].[GetimdbData] ").ToListAsync();

            return procResultData;
        }

    }
    #endregion

    #region Database context factory

    public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Actor> Actors { get; set; }
        public System.Data.Entity.DbSet<MovieProducer> MovieProducers { get; set; }
        public System.Data.Entity.DbSet<MovieProducerActor> MovieProducerActors { get; set; }
        public System.Data.Entity.DbSet<Movy> Movies { get; set; }
        public System.Data.Entity.DbSet<Producer> Producers { get; set; }

        public FakeMyDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Actors = new FakeDbSet<Actor>("ActorId");
            MovieProducers = new FakeDbSet<MovieProducer>("MovieId");
            MovieProducerActors = new FakeDbSet<MovieProducerActor>("MovieProducerActor_");
            Movies = new FakeDbSet<Movy>("MovieId");
            Producers = new FakeDbSet<Producer>("ProducerId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<GetimdbDataReturnModel> GetimdbData()
        {
            int procResult;
            return GetimdbData(out procResult);
        }

        public System.Collections.Generic.List<GetimdbDataReturnModel> GetimdbData(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetimdbDataReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetimdbDataReturnModel>> GetimdbDataAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetimdbData(out procResult));
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Actors
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Actor
    {
        public int ActorId { get; set; } // ActorId (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Sex { get; set; } // Sex (length: 1)
        public System.DateTime Dob { get; set; } // DOB
        public string Bio { get; set; } // Bio (length: 1000)

        // Reverse navigation

        /// <summary>
        /// Child MovieProducerActors where [MovieProducerActor].[ActorId] point to this entity (FK__MovieProd__Actor__6383C8BA)
        /// </summary>
        public virtual System.Collections.Generic.IList<MovieProducerActor> MovieProducerActors { get; set; } // MovieProducerActor.FK__MovieProd__Actor__6383C8BA

        public Actor()
        {
            MovieProducerActors = new System.Collections.Generic.List<MovieProducerActor>();
        }
    }

    // MovieProducer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MovieProducer
    {
        public int MovieId { get; set; } // MovieId (Primary key via unique index UQ__MoviePro__4BD2941B88C15766)
        public int ProducerId { get; set; } // ProducerId

        // Foreign keys

        /// <summary>
        /// Parent Movy pointed by [MovieProducer].([MovieId]) (FK__MovieProd__Movie__5BE2A6F2)
        /// </summary>
        public virtual Movy Movy { get; set; } // FK__MovieProd__Movie__5BE2A6F2

        /// <summary>
        /// Parent Producer pointed by [MovieProducer].([ProducerId]) (FK__MovieProd__Produ__5CD6CB2B)
        /// </summary>
        public virtual Producer Producer { get; set; } // FK__MovieProd__Produ__5CD6CB2B
    }

    // MovieProducerActor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MovieProducerActor
    {
        public int MovieProducerActor_ { get; set; } // MovieProducerActor (Primary key)
        public int MovieId { get; set; } // MovieId
        public int ActorId { get; set; } // ActorId

        // Foreign keys

        /// <summary>
        /// Parent Actor pointed by [MovieProducerActor].([ActorId]) (FK__MovieProd__Actor__6383C8BA)
        /// </summary>
        public virtual Actor Actor { get; set; } // FK__MovieProd__Actor__6383C8BA

        /// <summary>
        /// Parent Movy pointed by [MovieProducerActor].([MovieId]) (FK__MovieProd__Movie__628FA481)
        /// </summary>
        public virtual Movy Movy { get; set; } // FK__MovieProd__Movie__628FA481
    }

    // Movies
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Movy
    {
        public int MovieId { get; set; } // MovieId (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string YoR { get; set; } // YoR (length: 4)
        public string Plot { get; set; } // Plot (length: 1000)
        public string Bio { get; set; } // Bio (length: 1000)
        public string Poster { get; set; } // Poster (length: 100)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Movy pointed by [MovieProducer].[MovieId] (FK__MovieProd__Movie__5BE2A6F2)
        /// </summary>
        public virtual MovieProducer MovieProducer { get; set; } // MovieProducer.FK__MovieProd__Movie__5BE2A6F2
        /// <summary>
        /// Child MovieProducerActors where [MovieProducerActor].[MovieId] point to this entity (FK__MovieProd__Movie__628FA481)
        /// </summary>
        public virtual System.Collections.Generic.IList<MovieProducerActor> MovieProducerActors { get; set; } // MovieProducerActor.FK__MovieProd__Movie__628FA481

        public Movy()
        {
            MovieProducerActors = new System.Collections.Generic.List<MovieProducerActor>();
        }
    }

    // Producers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Producer
    {
        public int ProducerId { get; set; } // ProducerId (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Sex { get; set; } // Sex (length: 1)
        public System.DateTime Dob { get; set; } // DOB
        public string Bio { get; set; } // Bio (length: 1000)

        // Reverse navigation

        /// <summary>
        /// Child MovieProducers where [MovieProducer].[ProducerId] point to this entity (FK__MovieProd__Produ__5CD6CB2B)
        /// </summary>
        public virtual System.Collections.Generic.IList<MovieProducer> MovieProducers { get; set; } // MovieProducer.FK__MovieProd__Produ__5CD6CB2B

        public Producer()
        {
            MovieProducers = new System.Collections.Generic.List<MovieProducer>();
        }
    }

    #endregion

    #region POCO Configuration

    // Actors
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ActorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Actor>
    {
        public ActorConfiguration()
            : this("dbo")
        {
        }

        public ActorConfiguration(string schema)
        {
            ToTable("Actors", schema);
            HasKey(x => x.ActorId);

            Property(x => x.ActorId).HasColumnName(@"ActorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Sex).HasColumnName(@"Sex").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Dob).HasColumnName(@"DOB").HasColumnType("date").IsRequired();
            Property(x => x.Bio).HasColumnName(@"Bio").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1000);
        }
    }

    // MovieProducer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MovieProducerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MovieProducer>
    {
        public MovieProducerConfiguration()
            : this("dbo")
        {
        }

        public MovieProducerConfiguration(string schema)
        {
            ToTable("MovieProducer", schema);
            HasKey(x => x.MovieId);

            Property(x => x.MovieId).HasColumnName(@"MovieId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProducerId).HasColumnName(@"ProducerId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Movy).WithOptional(b => b.MovieProducer).WillCascadeOnDelete(false); // FK__MovieProd__Movie__5BE2A6F2
            HasRequired(a => a.Producer).WithMany(b => b.MovieProducers).HasForeignKey(c => c.ProducerId).WillCascadeOnDelete(false); // FK__MovieProd__Produ__5CD6CB2B
        }
    }

    // MovieProducerActor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MovieProducerActorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MovieProducerActor>
    {
        public MovieProducerActorConfiguration()
            : this("dbo")
        {
        }

        public MovieProducerActorConfiguration(string schema)
        {
            ToTable("MovieProducerActor", schema);
            HasKey(x => x.MovieProducerActor_);

            Property(x => x.MovieProducerActor_).HasColumnName(@"MovieProducerActor").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MovieId).HasColumnName(@"MovieId").HasColumnType("int").IsRequired();
            Property(x => x.ActorId).HasColumnName(@"ActorId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Actor).WithMany(b => b.MovieProducerActors).HasForeignKey(c => c.ActorId).WillCascadeOnDelete(false); // FK__MovieProd__Actor__6383C8BA
            HasRequired(a => a.Movy).WithMany(b => b.MovieProducerActors).HasForeignKey(c => c.MovieId).WillCascadeOnDelete(false); // FK__MovieProd__Movie__628FA481
        }
    }

    // Movies
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MovyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Movy>
    {
        public MovyConfiguration()
            : this("dbo")
        {
        }

        public MovyConfiguration(string schema)
        {
            ToTable("Movies", schema);
            HasKey(x => x.MovieId);

            Property(x => x.MovieId).HasColumnName(@"MovieId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.YoR).HasColumnName(@"YoR").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(4);
            Property(x => x.Plot).HasColumnName(@"Plot").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1000);
            Property(x => x.Bio).HasColumnName(@"Bio").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1000);
            Property(x => x.Poster).HasColumnName(@"Poster").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // Producers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ProducerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Producer>
    {
        public ProducerConfiguration()
            : this("dbo")
        {
        }

        public ProducerConfiguration(string schema)
        {
            ToTable("Producers", schema);
            HasKey(x => x.ProducerId);

            Property(x => x.ProducerId).HasColumnName(@"ProducerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Sex).HasColumnName(@"Sex").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Dob).HasColumnName(@"DOB").HasColumnType("date").IsRequired();
            Property(x => x.Bio).HasColumnName(@"Bio").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1000);
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class GetimdbDataReturnModel
    {
        public System.Int32 MovieId { get; set; }
        public System.String MovieName { get; set; }
        public System.String YearOfRelease { get; set; }
        public System.String MoviePlot { get; set; }
        public System.String MovieBio { get; set; }
        public System.String MoviePoster { get; set; }
        public System.Int32 ActorId { get; set; }
        public System.String ActorName { get; set; }
        public System.String ActorSex { get; set; }
        public System.DateTime ActorDob { get; set; }
        public System.String ActorBio { get; set; }
        public System.Int32? ProducerId { get; set; }
        public System.String ProducerName { get; set; }
        public System.String ProducerSex { get; set; }
        public System.DateTime? ProducerDob { get; set; }
        public System.String ProducerBio { get; set; }
    }

    #endregion

}
// </auto-generated>

